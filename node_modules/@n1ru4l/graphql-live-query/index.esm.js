import { GraphQLDirective, DirectiveLocation, GraphQLBoolean, GraphQLError } from 'graphql';

const GraphQLLiveDirective = new GraphQLDirective({
    name: "live",
    description: "Instruction for establishing a live connection that is updated once the underlying data changes.",
    locations: [DirectiveLocation.QUERY],
    args: {
        if: {
            type: GraphQLBoolean,
            defaultValue: true,
            description: "Whether the query should be live or not.",
        },
    },
});

const isSome = (input) => input != null;
const isNone = (input) => input == null;

const isLiveQueryOperationDefinitionNode = (input, variables) => {
    var _a, _b, _c, _d;
    if (input.kind !== "OperationDefinition" || input.operation !== "query") {
        return false;
    }
    const liveDirective = (_a = input.directives) === null || _a === void 0 ? void 0 : _a.find((d) => d.name.value === "live");
    if (isNone(liveDirective)) {
        return false;
    }
    const ifArgument = (_b = liveDirective.arguments) === null || _b === void 0 ? void 0 : _b.find((arg) => arg.name.value === "if");
    if (isNone(ifArgument)) {
        return true;
    }
    if (ifArgument.value.kind === "BooleanValue" &&
        ifArgument.value.value === true) {
        return true;
    }
    if (ifArgument.value.kind !== "Variable") {
        return false;
    }
    if (isSome(variables) && isSome(variables[ifArgument.value.name.value])) {
        return Boolean(variables[ifArgument.value.name.value]);
    }
    const variableName = ifArgument.value.name.value;
    const variableNode = (_c = input.variableDefinitions) === null || _c === void 0 ? void 0 : _c.find((def) => def.variable.name.value === variableName);
    if (((_d = variableNode === null || variableNode === void 0 ? void 0 : variableNode.defaultValue) === null || _d === void 0 ? void 0 : _d.kind) === "BooleanValue") {
        return variableNode.defaultValue.value;
    }
    return false;
};

const NoLiveMixedWithDeferStreamRule = (context) => {
    return {
        OperationDefinition(operationDefinitionNode) {
            if (isLiveQueryOperationDefinitionNode(operationDefinitionNode) === false) {
                return false;
            }
        },
        Directive(directiveNode) {
            if (directiveNode.name.value === "defer" ||
                directiveNode.name.value === "stream") {
                context.reportError(new GraphQLError(`Cannot mix "@${directiveNode.name.value}" with "@live".`, directiveNode.name));
            }
        },
    };
};

export { GraphQLLiveDirective, NoLiveMixedWithDeferStreamRule, isLiveQueryOperationDefinitionNode };
//# sourceMappingURL=index.esm.js.map
