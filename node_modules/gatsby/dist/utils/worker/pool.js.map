{"version":3,"sources":["../../../src/utils/worker/pool.ts"],"names":["create","numWorkers","Math","max","reporter","verbose","worker","WorkerPool","require","resolve","env","GATSBY_WORKER_POOL_WORKER","runQueriesInWorkersQueue","pool","queryIds","chunkSize","staticQuerySegments","staticQueryIds","pageQuerySegments","pageQueryIds","activity","createProgress","length","start","promises","segment","push","single","runQueries","then","replayWorkerActions","tick","Promise","all","end","actions","i","action","store","dispatch","process","nextTick"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAGA;;AAKO,MAAMA,MAAM,GAAG,MAAwB;AAC5C,QAAMC,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,uCAAiB,CAA7B,CAAnB;;AACAC,oBAASC,OAAT,CAAkB,YAAWJ,UAAW,SAAxC;;AAEA,QAAMK,MAAwB,GAAG,IAAIC,wBAAJ,CAAeC,OAAO,CAACC,OAAR,CAAiB,SAAjB,CAAf,EAA2C;AAC1ER,IAAAA,UAD0E;AAE1ES,IAAAA,GAAG,EAAE;AACHC,MAAAA,yBAAyB,EAAG;AADzB;AAFqE,GAA3C,CAAjC;AAOA,uDAA+BL,MAA/B;AACA,qDAAmCA,MAAnC;AAEA,SAAOA,MAAP;AACD,CAfM;;;;AAiBA,eAAeM,wBAAf,CACLC,IADK,EAELC,QAFK,EAGLC,SAAS,GAAG,EAHP,EAIU;AACf,QAAMC,mBAAmB,GAAG,mBAAMF,QAAQ,CAACG,cAAf,EAA+BF,SAA/B,CAA5B;AACA,QAAMG,iBAAiB,GAAG,mBAAMJ,QAAQ,CAACK,YAAf,EAA6BJ,SAA7B,CAA1B;;AAEA,QAAMK,QAAQ,GAAGhB,kBAASiB,cAAT,CACd,wBADc,EAEfP,QAAQ,CAACG,cAAT,CAAwBK,MAAxB,GAAiCR,QAAQ,CAACK,YAAT,CAAsBG,MAFxC,CAAjB;;AAIAF,EAAAA,QAAQ,CAACG,KAAT;AAEA,QAAMC,QAA8B,GAAG,EAAvC;;AAEA,OAAK,MAAMC,OAAX,IAAsBT,mBAAtB,EAA2C;AACzCQ,IAAAA,QAAQ,CAACE,IAAT,CACEb,IAAI,CAACc,MAAL,CACGC,UADH,CACc;AAAET,MAAAA,YAAY,EAAE,EAAhB;AAAoBF,MAAAA,cAAc,EAAEQ;AAApC,KADd,EAEGI,IAFH,CAEQC,mBAFR,EAGGD,IAHH,CAGQ,MAAM;AACVT,MAAAA,QAAQ,CAACW,IAAT,CAAcN,OAAO,CAACH,MAAtB;AACD,KALH,CADF;AAQD;;AAED,OAAK,MAAMG,OAAX,IAAsBP,iBAAtB,EAAyC;AACvCM,IAAAA,QAAQ,CAACE,IAAT,CACEb,IAAI,CAACc,MAAL,CACGC,UADH,CACc;AAAET,MAAAA,YAAY,EAAEM,OAAhB;AAAyBR,MAAAA,cAAc,EAAE;AAAzC,KADd,EAEGY,IAFH,CAEQC,mBAFR,EAGGD,IAHH,CAGQ,MAAM;AACVT,MAAAA,QAAQ,CAACW,IAAT,CAAcN,OAAO,CAACH,MAAtB;AACD,KALH,CADF;AAQD;;AAED,QAAMU,OAAO,CAACC,GAAR,CAAYT,QAAZ,CAAN;AAEAJ,EAAAA,QAAQ,CAACc,GAAT;AACD;;AAED,eAAeJ,mBAAf,CACEK,OADF,EAEiB;AACf,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,MAAMC,MAAX,IAAqBF,OAArB,EAA8B;AAC5BG,iBAAMC,QAAN,CAAeF,MAAf,EAD4B,CAG5B;;;AACA,QAAID,CAAC,KAAK,GAAN,KAAc,CAAlB,EAAqB;AACnB,YAAM,IAAIJ,OAAJ,CAAYvB,OAAO,IAAI+B,OAAO,CAACC,QAAR,CAAiBhC,OAAjB,CAAvB,CAAN;AACD;AACF;AACF","sourcesContent":["import { WorkerPool } from \"gatsby-worker\"\nimport { chunk } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { cpuCoreCount } from \"gatsby-core-utils\"\n\nimport { IGroupedQueryIds } from \"../../services\"\nimport { initJobsMessagingInMainProcess } from \"../jobs/worker-messaging\"\nimport { initReporterMessagingInMainProcess } from \"./reporter\"\n\nimport { GatsbyWorkerPool } from \"./types\"\nimport { store } from \"../../redux\"\nimport { ActionsUnion } from \"../../redux/types\"\n\nexport type { GatsbyWorkerPool }\n\nexport const create = (): GatsbyWorkerPool => {\n  const numWorkers = Math.max(1, cpuCoreCount() - 1)\n  reporter.verbose(`Creating ${numWorkers} worker`)\n\n  const worker: GatsbyWorkerPool = new WorkerPool(require.resolve(`./child`), {\n    numWorkers,\n    env: {\n      GATSBY_WORKER_POOL_WORKER: `true`,\n    },\n  })\n\n  initJobsMessagingInMainProcess(worker)\n  initReporterMessagingInMainProcess(worker)\n\n  return worker\n}\n\nexport async function runQueriesInWorkersQueue(\n  pool: GatsbyWorkerPool,\n  queryIds: IGroupedQueryIds,\n  chunkSize = 50\n): Promise<void> {\n  const staticQuerySegments = chunk(queryIds.staticQueryIds, chunkSize)\n  const pageQuerySegments = chunk(queryIds.pageQueryIds, chunkSize)\n\n  const activity = reporter.createProgress(\n    `run queries in workers`,\n    queryIds.staticQueryIds.length + queryIds.pageQueryIds.length\n  )\n  activity.start()\n\n  const promises: Array<Promise<void>> = []\n\n  for (const segment of staticQuerySegments) {\n    promises.push(\n      pool.single\n        .runQueries({ pageQueryIds: [], staticQueryIds: segment })\n        .then(replayWorkerActions)\n        .then(() => {\n          activity.tick(segment.length)\n        })\n    )\n  }\n\n  for (const segment of pageQuerySegments) {\n    promises.push(\n      pool.single\n        .runQueries({ pageQueryIds: segment, staticQueryIds: [] })\n        .then(replayWorkerActions)\n        .then(() => {\n          activity.tick(segment.length)\n        })\n    )\n  }\n\n  await Promise.all(promises)\n\n  activity.end()\n}\n\nasync function replayWorkerActions(\n  actions: Array<ActionsUnion>\n): Promise<void> {\n  let i = 1\n  for (const action of actions) {\n    store.dispatch(action)\n\n    // Give event loop some breath\n    if (i++ % 100 === 0) {\n      await new Promise(resolve => process.nextTick(resolve))\n    }\n  }\n}\n"],"file":"pool.js"}