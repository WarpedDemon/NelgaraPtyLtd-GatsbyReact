"use strict";

exports.__esModule = true;
exports.setComponents = setComponents;
exports.saveQueries = saveQueries;
exports.runQueries = runQueries;

var _services = require("../../../services");

var _redux = require("../../../redux");

var _graphqlRunner = require("../../../query/graphql-runner");

var _datastore = require("../../../datastore");

var _state = require("./state");

var _schema = require("./schema");

function setComponents() {
  (0, _state.setState)([`components`, `staticQueryComponents`]);
}

function saveQueries() {
  (0, _redux.savePartialStateToDisk)([`queries`], process.env.GATSBY_WORKER_ID);
}

let gqlRunner;

function getGraphqlRunner() {
  if (!gqlRunner) {
    gqlRunner = new _graphqlRunner.GraphQLRunner(_redux.store, {
      collectStats: true,
      graphqlTracing: _redux.store.getState().program.graphqlTracing
    });
  }

  return gqlRunner;
}

async function runQueries(queryIds) {
  const actionsToReplay = [];

  const unsubscribe = _redux.store.subscribe(() => {
    const action = _redux.store.getState().lastAction;

    if (action.type === `QUERY_START` || action.type === `PAGE_QUERY_RUN` || action.type === `ADD_PENDING_PAGE_DATA_WRITE` || action.type === `CREATE_COMPONENT_DEPENDENCY`) {
      actionsToReplay.push(action);
    }
  });

  try {
    await doRunQueries(queryIds);
    return actionsToReplay;
  } finally {
    unsubscribe();
  }
}

async function doRunQueries(queryIds) {
  const workerStore = _redux.store.getState(); // If buildSchema() didn't run yet, execute it


  if (workerStore.schemaCustomization.composer === null) {
    await (0, _schema.buildSchema)();
  }

  setComponents();
  const graphqlRunner = getGraphqlRunner();
  await (0, _services.runStaticQueries)({
    queryIds,
    store: _redux.store,
    graphqlRunner
  });
  await (0, _services.runPageQueries)({
    queryIds,
    store: _redux.store,
    graphqlRunner
  });
  await (0, _datastore.getDataStore)().ready();
}
//# sourceMappingURL=queries.js.map